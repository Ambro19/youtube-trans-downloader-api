#!/usr/bin/env python3
"""
Stripe Setup Script - Create Price IDs for your Stripe account
This will create the correct price IDs that your application expects
"""

import stripe
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def setup_stripe_prices():
    """Create the price IDs needed for the subscription system"""
    
    # Configure Stripe
    stripe_secret = os.getenv('STRIPE_SECRET_KEY')
    if not stripe_secret:
        print("‚ùå STRIPE_SECRET_KEY not found in environment variables")
        print("Please add your Stripe secret key to the .env file:")
        print("STRIPE_SECRET_KEY=sk_test_...")
        return False
    
    stripe.api_key = stripe_secret
    print(f"üî• Using Stripe key: {stripe_secret[:12]}...")
    
    try:
        # Create Pro Plan Product
        print("üî• Creating Pro Plan...")
        pro_product = stripe.Product.create(
            name="Pro Plan",
            description="100 clean transcripts, 50 unclean transcripts, 50 audio downloads, 20 video downloads per month"
        )
        
        # Create Pro Plan Price
        pro_price = stripe.Price.create(
            unit_amount=999,  # $9.99 in cents
            currency='usd',
            recurring={'interval': 'month'},
            product=pro_product.id,
        )
        
        print(f"‚úÖ Pro Plan created: {pro_price.id}")
        
        # Create Premium Plan Product
        print("üî• Creating Premium Plan...")
        premium_product = stripe.Product.create(
            name="Premium Plan", 
            description="Unlimited downloads for all content types"
        )
        
        # Create Premium Plan Price
        premium_price = stripe.Price.create(
            unit_amount=1999,  # $19.99 in cents
            currency='usd',
            recurring={'interval': 'month'},
            product=premium_product.id,
        )
        
        print(f"‚úÖ Premium Plan created: {premium_price.id}")
        
        # Update .env file
        env_updates = f"""
# Stripe Price IDs - Generated by setup_stripe_prices.py
STRIPE_PRO_PRICE_ID={pro_price.id}
STRIPE_PREMIUM_PRICE_ID={premium_price.id}
"""
        
        print("\nüî• Add these to your .env file:")
        print(env_updates)
        
        # Try to update .env file automatically
        try:
            with open('.env', 'r') as f:
                env_content = f.read()
            
            # Remove old price IDs if they exist
            lines = env_content.split('\n')
            filtered_lines = [line for line in lines if not line.startswith('STRIPE_PRO_PRICE_ID=') and not line.startswith('STRIPE_PREMIUM_PRICE_ID=')]
            
            # Add new price IDs
            filtered_lines.append(f"STRIPE_PRO_PRICE_ID={pro_price.id}")
            filtered_lines.append(f"STRIPE_PREMIUM_PRICE_ID={premium_price.id}")
            
            with open('.env', 'w') as f:
                f.write('\n'.join(filtered_lines))
            
            print("‚úÖ .env file updated automatically!")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Could not update .env file automatically: {e}")
            print("Please add the price IDs manually to your .env file")
        
        return True
        
    except stripe.error.StripeError as e:
        print(f"‚ùå Stripe error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def verify_stripe_prices():
    """Verify that the price IDs in .env work"""
    
    stripe_secret = os.getenv('STRIPE_SECRET_KEY')
    if not stripe_secret:
        print("‚ùå STRIPE_SECRET_KEY not found")
        return False
    
    stripe.api_key = stripe_secret
    
    pro_price_id = os.getenv('STRIPE_PRO_PRICE_ID')
    premium_price_id = os.getenv('STRIPE_PREMIUM_PRICE_ID')
    
    if not pro_price_id or not premium_price_id:
        print("‚ùå Price IDs not found in environment variables")
        return False
    
    try:
        # Test Pro price
        pro_price = stripe.Price.retrieve(pro_price_id)
        print(f"‚úÖ Pro Price verified: {pro_price_id} (${pro_price.unit_amount/100}/month)")
        
        # Test Premium price  
        premium_price = stripe.Price.retrieve(premium_price_id)
        print(f"‚úÖ Premium Price verified: {premium_price_id} (${premium_price.unit_amount/100}/month)")
        
        return True
        
    except stripe.error.StripeError as e:
        print(f"‚ùå Stripe verification error: {e}")
        return False

if __name__ == "__main__":
    print("üî• Setting up Stripe prices for YouTube Content Downloader...")
    print("=" * 60)
    
    # Check if price IDs already exist
    load_dotenv()
    existing_pro = os.getenv('STRIPE_PRO_PRICE_ID')
    existing_premium = os.getenv('STRIPE_PREMIUM_PRICE_ID')
    
    if existing_pro and existing_premium:
        print("üîç Found existing price IDs, verifying...")
        if verify_stripe_prices():
            print("‚úÖ Existing price IDs are working correctly!")
            exit(0)
        else:
            print("‚ùå Existing price IDs are not working, creating new ones...")
    
    # Create new price IDs
    success = setup_stripe_prices()
    
    if success:
        print("\nüéâ Stripe setup completed successfully!")
        print("üîÑ Please restart your FastAPI server for changes to take effect")
        print("\nNext steps:")
        print("1. Restart your backend server (python main.py)")
        print("2. Test the payment flow in your application")
    else:
        print("\n‚ùå Stripe setup failed!")
        print("Please check your Stripe credentials and try again")